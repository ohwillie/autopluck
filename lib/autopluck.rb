require_relative 'autopluck/version'

module Autopluck
  class << self
    attr_reader :deactivated
    alias :deactivated? :deactivated

    def activate!
      unless defined? @deactivated
        require 'active_record'
        ActiveRecord::Relation.send(:include, self)
      end
      @deactivated = false
    end

    def deactivate!
      @deactivated = true
    end

    def extract_symbol(obj)
      require_relative 'autopluck.so'
      raise ArgumentError, "obj must be a kind of Proc" unless obj.kind_of?(Proc)
      __extract_symbol(obj)
    end

    # ActiveRecord actually defines attribute methods into a Module. We can see if the
    # method was generated by matching it against this relations generated attribute methods,
    # which will be that Module if the method was generated.
    def defined_by_model_class?(symbol, relation)
      method(symbol).owner == relation.generated_attribute_methods
    end

    def should_not_pluck?(symbol, relation)
      symbol.nil? || !respond_to?(symbol) || defined_by_model_class?(symbol, relation)
    end
  end

  def map(&block)
    return super if Autopluck.deactivated? || loaded?
    symbol = Autopluck.extract_symbol(block)
    Autopluck.should_not_pluck?(symbol, self) ? super : pluck("#{table_name}.#{symbol}")
  end
end
